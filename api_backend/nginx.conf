user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# Events block
 events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    client_max_body_size 100M;

    # Rate limiting zones for DoS protection
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=strict:10m rate=1r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Security: Block malicious IPs
    map $remote_addr $blocked_ip {
        47.97.187.85 1;
        default 0;
    }

    # Security: Block access to vulnerable development files
    map $uri $blocked_path {
        ~*/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin\.php$ 1;
        ~*/vendor/phpunit/.*\.php$ 1;
        ~*/\.git/ 1;
        ~*/\.env$ 1;
        ~*/\.env\.local$ 1;
        ~*/composer\.json$ 1;
        ~*/composer\.lock$ 1;
        ~*/package\.json$ 1;
        ~*/yarn\.lock$ 1;
        default 0;
    }

    # Frontend: www.shadow-trainer.com -> react_frontend:3000
    server {
        listen 80;
        server_name www.shadow-trainer.com;

        # Security: Block malicious IPs
        if ($blocked_ip) {
            return 403;
        }

        # Security: Block vulnerable paths
        if ($blocked_path) {
            return 404;
        }

        # Rate limiting and connection limits
        limit_req zone=general burst=20 nodelay;
        limit_conn conn_limit_per_ip 10;

        location / {
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # HTTPS Frontend
    server {
        listen 443 ssl;
        server_name www.shadow-trainer.com;
        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Security: Block malicious IPs
        if ($blocked_ip) {
            return 403;
        }

        # Security: Block vulnerable paths
        if ($blocked_path) {
            return 404;
        }

        # Rate limiting and connection limits
        limit_req zone=general burst=20 nodelay;
        limit_conn conn_limit_per_ip 10;

        location / {
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Backend: api.shadow-trainer.com -> fastapi:8000
    server {
        listen 8000;
        server_name api.shadow-trainer.com;

        # Security: Block malicious IPs
        if ($blocked_ip) {
            return 403;
        }

        # Security: Block vulnerable paths
        if ($blocked_path) {
            return 404;
        }

        # Stricter rate limiting for API endpoints
        limit_req zone=api burst=10 nodelay;
        limit_conn conn_limit_per_ip 5;

        location / {
            proxy_pass http://api:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # HTTPS Backend
    server {
        listen 443 ssl;
        server_name api.shadow-trainer.com;
        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Security: Block malicious IPs
        if ($blocked_ip) {
            return 403;
        }

        # Security: Block vulnerable paths
        if ($blocked_path) {
            return 404;
        }

        # Stricter rate limiting for API endpoints
        limit_req zone=api burst=10 nodelay;
        limit_conn conn_limit_per_ip 5;

        location / {
            proxy_pass http://api:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Flower Monitoring: flower.shadow-trainer.com -> flower:5555
    server {
        listen 80;
        server_name flower.shadow-trainer.com;

        # Security: Block malicious IPs
        if ($blocked_ip) {
            return 403;
        }

        # Security: Block vulnerable paths
        if ($blocked_path) {
            return 404;
        }

        # Very strict rate limiting for monitoring interface
        limit_req zone=strict burst=5 nodelay;
        limit_conn conn_limit_per_ip 2;

        location / {
            proxy_pass http://flower:5555;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # HTTPS Flower
    server {
        listen 443 ssl;
        server_name flower.shadow-trainer.com;
        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Security: Block malicious IPs
        if ($blocked_ip) {
            return 403;
        }

        # Security: Block vulnerable paths
        if ($blocked_path) {
            return 404;
        }

        # Very strict rate limiting for monitoring interface
        limit_req zone=strict burst=5 nodelay;
        limit_conn conn_limit_per_ip 2;

        location / {
            proxy_pass http://flower:5555;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
